{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","CommentItem","props","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredData","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","url"],"mappings":"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","file":"static/js/4.782c5c51.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3Sn80\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2xQQ5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2mo6L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3nuEX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__1-i6_\",\"loading\":\"NewCommentForm_loading__1lgXR\",\"control\":\"NewCommentForm_control__2qZPQ\",\"actions\":\"NewCommentForm_actions__3E8cv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__GrFLt\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredData = commentTextRef.current.value;\n\n    sendRequest({\n      commentData: {\n        text: enteredData,\n      },\n      quoteId: props.quoteId,\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router';\n\nimport classes from './Comments.module.css';\nimport CommentsList from './CommentsList';\nimport NewCommentForm from './NewCommentForm';\n\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className='centered'>No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from 'react';\r\nimport { Link, Route, useParams, useRouteMatch } from 'react-router-dom';\r\n\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\n\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className='centered focused'>{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <NoQuotesFound />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote author={loadedQuote.author} text={loadedQuote.text} />\r\n      <Route path={match.path} exact>\r\n        <div className='centered'>\r\n          <Link className='btn--flat' to={match.url + '/comments'}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={match.path + '/comments'}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}